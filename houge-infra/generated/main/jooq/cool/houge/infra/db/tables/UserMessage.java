/*
 * This file is generated by jOOQ.
 */
package cool.houge.infra.db.tables;


import cool.houge.infra.db.Public;
import cool.houge.infra.db.tables.records.UserMessageRecord;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 用户消息关联
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMessage extends TableImpl<UserMessageRecord> {

    /**
     * The reference instance of <code>public.t_user_message</code>
     */
    public static final UserMessage USER_MESSAGE = new UserMessage();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<UserMessageRecord> getRecordType() {
        return UserMessageRecord.class;
    }

    /**
     * The column <code>public.t_user_message.uid</code>. 用户 ID
     */
    public final TableField<UserMessageRecord, Long> UID = createField(DSL.name("uid"), SQLDataType.BIGINT.nullable(false), this, "用户 ID");

    /**
     * The column <code>public.t_user_message.message_id</code>. 消息 ID
     */
    public final TableField<UserMessageRecord, String> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.VARCHAR(15).nullable(false), this, "消息 ID");

    private UserMessage(Name alias, Table<UserMessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserMessage(Name alias, Table<UserMessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户消息关联"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.t_user_message</code> table reference
     */
    public UserMessage(String alias) {
        this(DSL.name(alias), USER_MESSAGE);
    }

    /**
     * Create an aliased <code>public.t_user_message</code> table reference
     */
    public UserMessage(Name alias) {
        this(alias, USER_MESSAGE);
    }

    /**
     * Create a <code>public.t_user_message</code> table reference
     */
    public UserMessage() {
        this(DSL.name("t_user_message"), null);
    }

    public <O extends Record> UserMessage(Table<O> child, ForeignKey<O, UserMessageRecord> key) {
        super(child, key, USER_MESSAGE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UserMessage as(String alias) {
        return new UserMessage(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public UserMessage as(Name alias) {
        return new UserMessage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserMessage rename(String name) {
        return new UserMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public UserMessage rename(Name name) {
        return new UserMessage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
