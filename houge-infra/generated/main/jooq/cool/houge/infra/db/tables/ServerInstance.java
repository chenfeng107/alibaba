/*
 * This file is generated by jOOQ.
 */
package cool.houge.infra.db.tables;


import cool.houge.infra.db.Public;
import cool.houge.infra.db.tables.records.ServerInstanceRecord;

import java.time.LocalDateTime;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 服务实例信息
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.15.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerInstance extends TableImpl<ServerInstanceRecord> {

    /**
     * The reference instance of <code>public.t_server_instance</code>
     */
    public static final ServerInstance SERVER_INSTANCE = new ServerInstance();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ServerInstanceRecord> getRecordType() {
        return ServerInstanceRecord.class;
    }

    /**
     * The column <code>public.t_server_instance.id</code>. 主键
     */
    public final TableField<ServerInstanceRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "主键");

    /**
     * The column <code>public.t_server_instance.app_name</code>. 应用名称
     */
    public final TableField<ServerInstanceRecord, String> APP_NAME = createField(DSL.name("app_name"), SQLDataType.VARCHAR(128).nullable(false), this, "应用名称");

    /**
     * The column <code>public.t_server_instance.host_name</code>. 主机名称
     */
    public final TableField<ServerInstanceRecord, String> HOST_NAME = createField(DSL.name("host_name"), SQLDataType.VARCHAR(64).nullable(false), this, "主机名称");

    /**
     * The column <code>public.t_server_instance.host_address</code>. 主机 IP 地址
     */
    public final TableField<ServerInstanceRecord, String> HOST_ADDRESS = createField(DSL.name("host_address"), SQLDataType.VARCHAR(64).nullable(false), this, "主机 IP 地址");

    /**
     * The column <code>public.t_server_instance.os_name</code>. 系统名称
     */
    public final TableField<ServerInstanceRecord, String> OS_NAME = createField(DSL.name("os_name"), SQLDataType.VARCHAR(64), this, "系统名称");

    /**
     * The column <code>public.t_server_instance.os_version</code>. 系统版本
     */
    public final TableField<ServerInstanceRecord, String> OS_VERSION = createField(DSL.name("os_version"), SQLDataType.VARCHAR(64).nullable(false), this, "系统版本");

    /**
     * The column <code>public.t_server_instance.os_arch</code>. OS Arch
     */
    public final TableField<ServerInstanceRecord, String> OS_ARCH = createField(DSL.name("os_arch"), SQLDataType.VARCHAR(64).nullable(false), this, "OS Arch");

    /**
     * The column <code>public.t_server_instance.os_user</code>. 系统的用户名
     */
    public final TableField<ServerInstanceRecord, String> OS_USER = createField(DSL.name("os_user"), SQLDataType.VARCHAR(64), this, "系统的用户名");

    /**
     * The column <code>public.t_server_instance.java_vm_name</code>. Java 虚拟机名称
     */
    public final TableField<ServerInstanceRecord, String> JAVA_VM_NAME = createField(DSL.name("java_vm_name"), SQLDataType.VARCHAR(64).nullable(false), this, "Java 虚拟机名称");

    /**
     * The column <code>public.t_server_instance.java_vm_version</code>. Java
     * 虚拟机版本
     */
    public final TableField<ServerInstanceRecord, String> JAVA_VM_VERSION = createField(DSL.name("java_vm_version"), SQLDataType.VARCHAR(32).nullable(false), this, "Java 虚拟机版本");

    /**
     * The column <code>public.t_server_instance.java_vm_vendor</code>. Java
     * 虚拟机供应商
     */
    public final TableField<ServerInstanceRecord, String> JAVA_VM_VENDOR = createField(DSL.name("java_vm_vendor"), SQLDataType.VARCHAR(64).nullable(false), this, "Java 虚拟机供应商");

    /**
     * The column <code>public.t_server_instance.work_dir</code>. 服务的工作目录
     */
    public final TableField<ServerInstanceRecord, String> WORK_DIR = createField(DSL.name("work_dir"), SQLDataType.VARCHAR(512).nullable(false), this, "服务的工作目录");

    /**
     * The column <code>public.t_server_instance.pid</code>. 进程 ID
     */
    public final TableField<ServerInstanceRecord, Long> PID = createField(DSL.name("pid"), SQLDataType.BIGINT.nullable(false), this, "进程 ID");

    /**
     * The column <code>public.t_server_instance.ver</code>. 数据版本
     */
    public final TableField<ServerInstanceRecord, Integer> VER = createField(DSL.name("ver"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "数据版本");

    /**
     * The column <code>public.t_server_instance.create_time</code>. 创建时间
     */
    public final TableField<ServerInstanceRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>public.t_server_instance.check_time</code>.
     * 最后检查时间，与当前时间相差超过1小时则默认服务已销毁
     */
    public final TableField<ServerInstanceRecord, LocalDateTime> CHECK_TIME = createField(DSL.name("check_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "最后检查时间，与当前时间相差超过1小时则默认服务已销毁");

    private ServerInstance(Name alias, Table<ServerInstanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServerInstance(Name alias, Table<ServerInstanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("服务实例信息"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.t_server_instance</code> table reference
     */
    public ServerInstance(String alias) {
        this(DSL.name(alias), SERVER_INSTANCE);
    }

    /**
     * Create an aliased <code>public.t_server_instance</code> table reference
     */
    public ServerInstance(Name alias) {
        this(alias, SERVER_INSTANCE);
    }

    /**
     * Create a <code>public.t_server_instance</code> table reference
     */
    public ServerInstance() {
        this(DSL.name("t_server_instance"), null);
    }

    public <O extends Record> ServerInstance(Table<O> child, ForeignKey<O, ServerInstanceRecord> key) {
        super(child, key, SERVER_INSTANCE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public ServerInstance as(String alias) {
        return new ServerInstance(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ServerInstance as(Name alias) {
        return new ServerInstance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ServerInstance rename(String name) {
        return new ServerInstance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ServerInstance rename(Name name) {
        return new ServerInstance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row16<Integer, String, String, String, String, String, String, String, String, String, String, String, Long, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
