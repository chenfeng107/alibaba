buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
  }

  dependencies {
    classpath("org.jooq:jooq-codegen:3.15.1")
    classpath("org.postgresql:postgresql:42.2.23")
  }
}

apply plugin: "com.google.protobuf"

def grpcGeneratedFilesBaseDir = "${projectDir}/generated"

sourceSets {
  main {
    java {
      srcDir "${grpcGeneratedFilesBaseDir}/main/java"
      srcDir "${grpcGeneratedFilesBaseDir}/main/grpc"
      srcDir "${grpcGeneratedFilesBaseDir}/main/reactor"
    }
  }
}

protobuf {
  generatedFilesBaseDir = grpcGeneratedFilesBaseDir
  protoc {
    artifact = "com.google.protobuf:protoc:3.17.3"
  }
  clean {
    delete protobuf.generatedFilesBaseDir
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:1.39.0"
    }
    reactor {
      artifact = "com.salesforce.servicelibs:reactor-grpc:1.1.0"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {}
      reactor {}
    }
  }
}

dependencies {
  protobuf(project(":houge-proto"))
  api(project(":houge-domain"))
  api(project(":houge-r2dbc"))
  api("top.yein.chaos:chaos-core")
  api("io.r2dbc:r2dbc-postgresql")
  api("io.r2dbc:r2dbc-pool")
  api("com.github.ben-manes.caffeine:caffeine")
  api("org.roaringbitmap:RoaringBitmap")
  api("com.auth0:java-jwt")

  api("org.jooq:jooq:3.15.1")

  implementation("io.grpc:grpc-protobuf:1.39.0")
  implementation("io.grpc:grpc-netty:1.39.0")
  implementation("io.grpc:grpc-stub:1.39.0")
  implementation("com.salesforce.servicelibs:reactor-grpc-stub:1.1.0")

  implementation("com.fasterxml.jackson.core:jackson-databind")

  testImplementation(project(":houge-core"))
  testImplementation("com.typesafe:config")
  testImplementation("org.apache.logging.log4j:log4j-core")
  testImplementation("org.apache.logging.log4j:log4j-slf4j-impl")
}

import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

task generateJOOQ {
  doLast {
    def target = new Target()
      .withPackageName('org.jooq.example.gradle.db')
      .withDirectory('src/main/java')

    def generate = new Generate()
      .withPojos(true)
      .withDaos(true)

    def generator = new Generator()
      .withDatabase(new Database())
      .withGenerate(generate)
      .withTarget(target)

    def jdbc = new Jdbc()
      .withDriver("org.postgresql.Driver")
      .withUrl("jdbc:postgresql://106.14.192.224:5432/zhoubao")
      .withUser("postgres")
      .withPassword("hellohuixin")

    def configuration = new Configuration()
      .withJdbc(jdbc)
      .withGenerator(generator)
    GenerationTool.generate(configuration)
  }
}