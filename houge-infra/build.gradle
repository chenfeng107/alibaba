apply plugin: "com.google.protobuf"
apply plugin: "nu.studer.jooq"

def grpcGeneratedFilesBaseDir = "${projectDir}/generated"
sourceSets {
  main {
    java {
      srcDir "${grpcGeneratedFilesBaseDir}/main/java"
      srcDir "${grpcGeneratedFilesBaseDir}/main/grpc"
      srcDir "${grpcGeneratedFilesBaseDir}/main/reactor"
      srcDir "${grpcGeneratedFilesBaseDir}/main/jooq"
    }
  }
}

protobuf {
  generatedFilesBaseDir = grpcGeneratedFilesBaseDir
  protoc {
    artifact = "com.google.protobuf:protoc:3.17.3"
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:1.39.0"
    }
    reactor {
      artifact = "com.salesforce.servicelibs:reactor-grpc:1.1.0"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {}
      reactor {}
    }
  }
}

jooq {
  configurations {
    main {
      generationTool {
        jdbc {
          driver = "org.postgresql.Driver"
          // 通过 gradle.properties 或 gradle-${environmentName}.properties 文件配置数据库连接参数
          url = rootProject.ext.hougeJdbcUrl
          user = rootProject.ext.hougeJdbcUser
          password = rootProject.ext.hougeJdbcPassword
        }
        generator {
          name = "org.jooq.codegen.DefaultGenerator"
          database {
            name = "org.jooq.meta.postgres.PostgresDatabase"
            inputSchema = "public"
            includeSystemTables = false
            includePrimaryKeys = false
            includeUniqueKeys = false
            includeIndexes = false
            includeSystemIndexes = false
            excludes = """
              public.flyway_schema_history
            """
          }
          generate {
            fluentSetters = true
            generatedAnnotation = true
            generatedAnnotationType = "DETECT_FROM_JDK"
            generatedAnnotationDate = true
            nullableAnnotation = true
            nullableAnnotationType = "javax.annotation.Nullable"
            nonnullAnnotation = true
            nonnullAnnotationType = "javax.annotation.Nonnull"
            // 禁止JDK内置的序列化与反序列化
            generatedSerialVersionUID = "OFF"
          }
          strategy {
            matchers {
              tables {
                table {
                  expression = "T_(.*)"
                  tableIdentifier {
                    transform = "UPPER"
                    expression = '$1'
                  }
                  tableClass {
                    transform = "PASCAL"
                    expression = '$1'
                  }
                  recordClass {
                    transform = "PASCAL"
                    expression = '$1_RECORD'
                  }
                }
              }
            }
          }
          target {
            packageName = "cool.houge.infra.db"
            directory = "${grpcGeneratedFilesBaseDir}/main/jooq"
            encoding = "UTF-8"
          }
          strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
        }
      }
    }
  }
}

dependencies {
  protobuf(project(":houge-proto"))
  api(project(":houge-domain"))
  api("top.yein.chaos:chaos-core")
  api("io.r2dbc:r2dbc-postgresql")
  api("io.r2dbc:r2dbc-pool")
  api("com.github.ben-manes.caffeine:caffeine")
  api("org.roaringbitmap:RoaringBitmap")
  api("com.auth0:java-jwt")

  api("org.jooq:jooq:3.15.1")

  implementation("io.grpc:grpc-protobuf:1.39.0")
  implementation("io.grpc:grpc-netty:1.39.0")
  implementation("io.grpc:grpc-stub:1.39.0")
  implementation("com.salesforce.servicelibs:reactor-grpc-stub:1.1.0")

  implementation("com.fasterxml.jackson.core:jackson-databind")

  testImplementation(project(":houge-core"))
  testImplementation("com.typesafe:config")
  testImplementation("org.apache.logging.log4j:log4j-core")
  testImplementation("org.apache.logging.log4j:log4j-slf4j-impl")

  jooqGenerator("org.postgresql:postgresql:42.2.14")
}