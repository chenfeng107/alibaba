apply plugin: "com.google.protobuf"
apply plugin: "nu.studer.jooq"

def grpcGeneratedFilesBaseDir = "${projectDir}/generated"

sourceSets {
  main {
    java {
      srcDir "${grpcGeneratedFilesBaseDir}/main/java"
      srcDir "${grpcGeneratedFilesBaseDir}/main/grpc"
      srcDir "${grpcGeneratedFilesBaseDir}/main/reactor"
    }
  }
}

protobuf {
  generatedFilesBaseDir = grpcGeneratedFilesBaseDir
  protoc {
    artifact = "com.google.protobuf:protoc:3.17.3"
  }
  clean {
    delete protobuf.generatedFilesBaseDir
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:1.39.0"
    }
    reactor {
      artifact = "com.salesforce.servicelibs:reactor-grpc:1.1.0"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {}
      reactor {}
    }
  }
}

jooq {
  version = "3.15.1"  // the default (can be omitted)
  edition = nu.studer.gradle.jooq.JooqEdition.OSS  // the default (can be omitted)

  configurations {
    main {  // name of the jOOQ configuration
      generateSchemaSourceOnCompilation = true  // default (can be omitted)

      generationTool {
        jdbc {
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5432/houge"
          user = "postgres"
          password = "123456"
        }
        generator {
          name = "org.jooq.codegen.DefaultGenerator"
          database {
            name = "org.jooq.meta.postgres.PostgresDatabase"
            inputSchema = "public"
            forcedTypes {
              forcedType {
                name = "varchar"
                includeExpression = ".*"
                includeTypes = "JSONB?"
              }
              forcedType {
                name = "varchar"
                includeExpression = ".*"
                includeTypes = "INET"
              }
            }
            excludes = """
              public.flyway_schema_history
            """
          }
          generate {
            records = true
            fluentSetters = true
          }
          target {
            packageName = "cool.houge.infra.db"
            directory = "build/generated-src/jooq/main"  // default (can be omitted)
          }
          strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
        }
      }
    }
  }
}

dependencies {
  protobuf(project(":houge-proto"))
  api(project(":houge-domain"))
  api(project(":houge-r2dbc"))
  api("top.yein.chaos:chaos-core")
  api("io.r2dbc:r2dbc-postgresql")
  api("io.r2dbc:r2dbc-pool")
  api("com.github.ben-manes.caffeine:caffeine")
  api("org.roaringbitmap:RoaringBitmap")
  api("com.auth0:java-jwt")

  api("org.jooq:jooq:3.15.1")

  implementation("io.grpc:grpc-protobuf:1.39.0")
  implementation("io.grpc:grpc-netty:1.39.0")
  implementation("io.grpc:grpc-stub:1.39.0")
  implementation("com.salesforce.servicelibs:reactor-grpc-stub:1.1.0")

  implementation("com.fasterxml.jackson.core:jackson-databind")

  testImplementation(project(":houge-core"))
  testImplementation("com.typesafe:config")
  testImplementation("org.apache.logging.log4j:log4j-core")
  testImplementation("org.apache.logging.log4j:log4j-slf4j-impl")

  jooqGenerator("org.postgresql:postgresql:42.2.14")
}