buildscript {
  dependencies {
    // https://github.com/fabric8io-images/run-java-sh
    // run-java.sh 是Java应用程序的通用启动脚本，特别是为从容器中运行而精心编制的。
//    classpath("io.fabric8:run-java-sh:1.3.8")
    classpath("org.ow2.asm:asm:9.1")
  }
}

plugins {
  id "net.saliman.properties" version "1.5.1"
  id "io.spring.dependency-management" version "1.0.9.RELEASE"
  id "com.github.hierynomus.license" version "0.15.0"
  id "me.champeau.gradle.jmh" version "0.5.0"
  id "org.flywaydb.flyway" version "7.3.1"
  id "com.novoda.build-properties" version "0.4.1"
  id "org.hidetake.ssh" version "2.10.1"
  id "com.github.johnrengelman.shadow" version "5.2.0"
  id "com.bmuschko.docker-remote-api" version "6.7.0"
  id "org.sonarqube" version "3.1.1"
  id "com.google.protobuf" version "0.8.17"
  id "nu.studer.jooq" version "6.0"
}

allprojects {

  apply plugin: "java"
  apply plugin: "java-library"
  apply plugin: "jacoco"
  apply plugin: "checkstyle"
  apply plugin: "net.saliman.properties"
  apply plugin: "io.spring.dependency-management"
  apply plugin: "com.github.johnrengelman.shadow"
  apply plugin: "me.champeau.gradle.jmh"
  apply plugin: "com.github.hierynomus.license"

  version = "1.0.0-SNAPSHOT"
  sourceCompatibility = "11"
  targetCompatibility = "11"

  [compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"

  test {
    useJUnitPlatform()
    testLogging {
      exceptionFormat "full"
      events "passed", "skipped", "failed"
    }
    workingDir rootProject.rootDir
    ignoreFailures = true
  }

  jacoco {
    toolVersion = "0.8.3"
  }

  jacocoTestReport {
    reports {
      xml.enabled = true
      html.enabled = true
    }
  }

  license {
    ignoreFailures = true
    header = rootProject.file("LICENSE")
    headerURI = com.hierynomus.gradle.license.LicenseBasePlugin.classLoader.getResource("headers/Apache-2.0").toURI()
    skipExistingHeaders = true
    mapping {
      java = "SLASHSTAR_STYLE"
      conf = "SCRIPT_STYLE"
      proto = "DOUBLESLASH_STYLE"
    }
    ext {
      year = "2019-${Calendar.instance.get(Calendar.YEAR)}"
      author = "the original author or authors"
    }
  }

  checkstyle {
    toolVersion = "8.33"
    configFile = rootProject.file("config/checkstyle/google_checks.xml")
  }

  tasks.withType(Checkstyle) {
    reports {
      xml.enabled = true
      html.enabled = true
    }
  }

  sonarqube {
    properties {
      property "sonar.projectKey", "houge"
      property "sonar.organization", "kevin70"
      property "sonar.host.url", "https://sonarcloud.io"
    }
  }

  dependencyManagement {
    imports {
      mavenBom("io.projectreactor:reactor-bom:2020.0.12")
      mavenBom("io.netty:netty-bom:4.1.69.Final")
      mavenBom("org.apache.logging.log4j:log4j-bom:2.14.1")
      mavenBom("com.fasterxml.jackson:jackson-bom:2.12.5")
      mavenBom("com.google.inject:guice-bom:5.0.1")
      mavenBom("io.r2dbc:r2dbc-bom:Arabba-SR10")
      mavenBom("org.jooq:jooq-parent:3.15.2")
      mavenBom("io.grpc:grpc-bom:1.41.0")
      mavenBom("com.salesforce.servicelibs:reactive-grpc:1.2.3")
      mavenBom("io.micrometer:micrometer-bom:1.7.3")

      // 测试工具
      mavenBom("org.testcontainers:testcontainers-bom:1.16.0")
      mavenBom("org.junit:junit-bom:5.7.2")
    }
    dependencies {
      dependency("org.projectlombok:lombok:1.18.20")
      dependencySet(group: "org.mapstruct", version: "1.5.0.Beta1") {
        entry "mapstruct-processor"
        entry "mapstruct"
      }
      dependency("org.yaml:snakeyaml:1.27")
      dependency("com.typesafe:config:1.4.1")
      dependency("com.github.ben-manes.caffeine:caffeine:3.0.3")
      dependency("org.postgresql:postgresql:42.2.14")
      dependency("io.lettuce:lettuce-core:6.1.4.RELEASE")
      dependency("com.auth0:java-jwt:3.18.1")
      dependency("org.roaringbitmap:RoaringBitmap:0.9.16")

      // 测试工具
      dependency("com.github.javafaker:javafaker:1.0.2")
      dependency("com.github.stefanbirkner:system-lambda:1.2.0")
      dependency("org.openjdk.jmh:jmh-core:1.33")
      dependency("org.openjdk.jmh:jmh-generator-annprocess:1.33")
      dependency("org.assertj:assertj-core:3.20.2")
      dependency("org.mockito:mockito-core:3.12.4")
      dependency("org.mockito:mockito-inline:3.12.4")
    }
  }

  dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.mapstruct:mapstruct-processor")

    compileOnly("org.projectlombok:lombok")
    compileOnly("com.google.code.findbugs:jsr305")
    implementation("org.mapstruct:mapstruct")
    implementation("org.apache.logging.log4j:log4j-core")
    implementation("org.apache.logging.log4j:log4j-slf4j18-impl")

    // Test
    testCompileOnly("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
    testImplementation("org.junit.platform:junit-platform-launcher")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("com.github.stefanbirkner:system-lambda")
    testImplementation("io.projectreactor:reactor-test")
    testImplementation("io.projectreactor:reactor-tools")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.mockito:mockito-inline")
    testImplementation("com.github.javafaker:javafaker")

    jmh("org.openjdk.jmh:jmh-core")
    jmh("org.openjdk.jmh:jmh-generator-annprocess")
  }

  repositories {
    mavenLocal()

//    def aliyunEnabled = System.getenv("GITHUB_ACTIONS") == null
//    if (aliyunEnabled) {
//      maven { url = "https://maven.aliyun.com/nexus/content/groups/public/" }
//    }

    mavenCentral()
    maven { url = "https://oss.sonatype.org/content/repositories/snapshots" }
  }

  jar {
    manifest {
      attributes(
          "Created-By": "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})",
          "Implementation-Title": project.name,
          "Implementation-Version": project.version,
          "Built-Date": java.time.OffsetDateTime.now().truncatedTo(java.time.temporal.ChronoUnit.SECONDS)
      )
    }
  }
}

ext {
  // 数据库名称
  def databaseName = "houge"
  // PostgreSQL 配置
  def postgresHost = requireProperty("hougePostgresHost")
  def postgresPort = properties["hougePostgresPort"] ?: 5432
  def postgresUser = requireProperty("hougePostgresUser")
  def postgresPassword = requireProperty("hougePostgresPassword")

  // ============================================================================== //
  // ~~~ 初始化环境配置
  // ============================================================================== //
  hougeJdbcUrl = "jdbc:postgresql://${postgresHost}:${postgresPort}/${databaseName}"
  hougeJdbcUser = postgresUser
  hougeJdbcPassword = postgresPassword
}

def requireProperty(name) {
  def v = rootProject.findProperty(name)
  if (v == null || v.isEmpty()) {
    throw new IllegalArgumentException("缺少配置参数 [${name}]，请在 `${rootDir}/gradle-local.properties` 文件中配置")
  }
  return v
}
