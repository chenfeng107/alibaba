buildscript {
  dependencies {
    // https://github.com/fabric8io-images/run-java-sh
    // run-java.sh 是Java应用程序的通用启动脚本，特别是为从容器中运行而精心编制的。
//    classpath("io.fabric8:run-java-sh:1.3.8")
    classpath("org.ow2.asm:asm:9.1")
  }
}

plugins {
  id "net.saliman.properties" version "1.5.1"
  id "io.spring.dependency-management" version "1.0.9.RELEASE"
  id "com.github.hierynomus.license" version "0.15.0"
  id "me.champeau.gradle.jmh" version "0.5.0"
  id "org.flywaydb.flyway" version "7.3.1"
  id "com.novoda.build-properties" version "0.4.1"
  id "org.hidetake.ssh" version "2.10.1"
  id "com.github.johnrengelman.shadow" version "5.2.0"
  id "com.bmuschko.docker-remote-api" version "6.7.0"
  id "org.sonarqube" version "3.1.1"
  id "com.google.protobuf" version "0.8.17"
  id "nu.studer.jooq" version "6.0"
}

flyway {
  configFiles = ["${projectDir}/flyway.conf"]
}

dependencies {
  // flywaydb 需要使用的依赖 https://flywaydb.org/
  implementation("org.postgresql:postgresql")
}

allprojects {

  apply plugin: "java"
  apply plugin: "java-library"
  apply plugin: "jacoco"
  apply plugin: "checkstyle"
  apply plugin: "net.saliman.properties"
  apply plugin: "io.spring.dependency-management"
  apply plugin: "com.github.johnrengelman.shadow"
  apply plugin: "me.champeau.gradle.jmh"
  apply plugin: "com.github.hierynomus.license"

  version = "1.0.0-SNAPSHOT"
  sourceCompatibility = "11"
  targetCompatibility = "11"

  [compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"

  test {
    useJUnitPlatform()
    testLogging {
      exceptionFormat "full"
      events "passed", "skipped", "failed"
    }
    workingDir rootProject.rootDir
    ignoreFailures = true
  }

  jacoco {
    toolVersion = "0.8.3"
  }

  jacocoTestReport {
    reports {
      xml.enabled = true
      html.enabled = true
    }
  }

  license {
    ignoreFailures = true
    header = rootProject.file("LICENSE")
    headerURI = com.hierynomus.gradle.license.LicenseBasePlugin.classLoader.getResource("headers/Apache-2.0").toURI()
    skipExistingHeaders = true
    mapping {
      java = "SLASHSTAR_STYLE"
      conf = "SCRIPT_STYLE"
      proto = "DOUBLESLASH_STYLE"
    }
    ext {
      year = "2019-${Calendar.instance.get(Calendar.YEAR)}"
      author = "the original author or authors"
    }
  }

  checkstyle {
    toolVersion = "8.33"
    configFile = rootProject.file("config/checkstyle/google_checks.xml")
  }

  tasks.withType(Checkstyle) {
    reports {
      xml.enabled = true
      html.enabled = true
    }
  }

  sonarqube {
    properties {
      property "sonar.projectKey", "houge"
      property "sonar.organization", "kevin70"
      property "sonar.host.url", "https://sonarcloud.io"
    }
  }

  dependencyManagement {
    imports {
      mavenBom("top.yein.chaos:chaos-bom:1.0-SNAPSHOT")
    }
  }

  dependencies {
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")

    // mapstruct
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.0.Beta1")
    implementation("org.mapstruct:mapstruct:1.5.0.Beta1")

    compileOnly("com.google.code.findbugs:jsr305")
    compileOnly("org.apache.logging.log4j:log4j-api")

    // Test
    testCompileOnly("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
    testImplementation("org.apache.logging.log4j:log4j-core")
    testImplementation("org.apache.logging.log4j:log4j-slf4j-impl")
    testImplementation("org.openjdk.jol:jol-core")
    testImplementation("org.junit.platform:junit-platform-launcher")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("com.github.stefanbirkner:system-lambda")
    testImplementation("io.projectreactor:reactor-test")
    testImplementation("io.projectreactor:reactor-tools")
    testImplementation("io.micrometer:micrometer-test")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.mockito:mockito-inline")
    testImplementation("org.powermock:powermock-reflect")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("com.github.javafaker:javafaker") {
      exclude module: "snakeyaml"
    }
    testImplementation("org.yaml:snakeyaml:1.27")

    jmh("org.openjdk.jmh:jmh-core")
    jmh("org.openjdk.jmh:jmh-generator-annprocess")
  }

  repositories {
    mavenLocal()

//    def aliyunEnabled = System.getenv("GITHUB_ACTIONS") == null
//    if (aliyunEnabled) {
//      maven { url = "https://maven.aliyun.com/nexus/content/groups/public/" }
//    }

    mavenCentral()
    maven { url = "https://oss.sonatype.org/content/repositories/snapshots" }
  }

  jar {
    manifest {
      attributes(
        "Created-By": "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})",
        "Implementation-Title": project.name,
        "Implementation-Version": project.version,
        "Built-Date": java.time.OffsetDateTime.now().truncatedTo(java.time.temporal.ChronoUnit.SECONDS)
      )
    }
  }
}

// ============================================================================== //
// ~~~ 初始化开发环境
// ============================================================================== //
task initDevEnv {
  group "dev"
  doLast {
    // 数据库名称
    def databaseName = "houge"
    // PostgreSQL 配置
    def postgresHost = requireProperty("houge.postgres.host")
    def postgresPort = properties["houge.postgres.port"] ?: 5432
    def postgresUser = requireProperty("houge.postgres.user")
    def postgresPassword = requireProperty("houge.postgres.password")
    // JDBC 参数
    def jdbcUrl = "jdbc:postgresql://${postgresHost}:${postgresPort}/${databaseName}"
    // 初始化 Flyway 配置
    initFlywayConf(jdbcUrl, postgresUser, postgresPassword)
    // 初始化 jOOQ 配置
  }
}

def initFlywayConf(jdbcUrl, user, password) {
  def confPath = java.nio.file.Paths.get("${rootDir}/flyway.conf")
  if (confPath.toFile().exists()) {
    confPath.toFile().delete()
  }

  java.nio.file.Files.copy(java.nio.file.Paths.get("${rootDir}/flyway.conf.template"), confPath)
  def text = confPath.text.replace("@JDBC_URL@", jdbcUrl)
    .replace("@JDBC_USER@", user)
    .replace("@JDBC_PASSWORD@", password)
  confPath.setText(text, "UTF-8")
}

def requireProperty(name) {
  def v = rootProject.property(name)
  if (v == null || v.isEmpty()) {
    throw new GradleException("缺少配置参数 [${name}]，请在 `${rootDir}/gradle-local.properties` 文件中配置")
  }
  return v
}